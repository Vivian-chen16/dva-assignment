
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: /home/notebook/work/Q3.ipynb

from pyspark.sql.functions import *
from pyspark.sql import *

def user():
    # Returns a string consisting of your GT username.
    return 'wchen678'

def long_trips(trips):
    # Returns a Dataframe with Schema the same as :trips:
    trips = trips.withColumn("trip_distance", col("trip_distance").cast("double")).filter(trips.trip_distance >= 2)

    return trips

def manhattan_trips(trips, lookup):
    # Returns a Dataframe with Schema: DOLocationID, pcount
    joined = trips.join(lookup, trips.DOLocationID == lookup.LocationID, "inner").filter(lookup.Borough == "Manhattan")
    cast = joined.withColumn("passenger_count", col("passenger_count").cast("int"))
    df = cast.groupBy("DOLocationID").agg(sum("passenger_count").alias("pcount")).orderBy(col("pcount").desc())

    return df.limit(20)

def weighted_profit(trips, mtrips):
    # Returns a Dataframe with Schema: PULocationID, weighted_profit
    # Note: Use decimal datatype for weighted profit (NOTE: DON'T USE FLOAT)
    # Our grader will be only be checking the first 8 characters for each value in the dataframe

    mtrips = mtrips.withColumnRenamed("DOLocationID", "m_DOLocationID")
    df = trips.join(mtrips, trips.DOLocationID == mtrips.m_DOLocationID, "left")
    df1 = df.withColumn("total_amount", col("total_amount").cast("double")).groupBy("PULocationID").agg(avg("total_amount").alias("avg_total_count"), count("PULocationID").alias("total_count"))
    df2 = df.where(col("m_DOLocationID").isNotNull()).groupBy("PULocationID").count().withColumnRenamed("PULocationID", "m_PULocationID")

    df3 = df1.join(df2, df1.PULocationID == df2.m_PULocationID)
    df3 = df3.withColumn("weighted_profit", col("count")/col("total_count")*col("avg_total_count"))

    return df3.select("PULocationID", "weighted_profit")

def final_output(calc, lookup):
    # Returns a Dataframe with Schema: Zone, Borough, weighted_profit
    # Note: Use decimal datatype for weighted profit (NOTE: DON'T USE FLOAT)
    # Our grader will be only be checking the first 8 characters for each value in the dataframe

    df = calc.join(lookup, calc.PULocationID == lookup.LocationID, "left")
    df = df.select("Zone", "Borough", "weighted_profit").orderBy(desc("weighted_profit"))

    return df.limit(20)
